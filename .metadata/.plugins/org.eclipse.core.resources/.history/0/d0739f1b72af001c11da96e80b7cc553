package date;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Date;

public class dataFormate_iso_format {
	public static void main(String[] args) throws ParseException {

		SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSXXX");
		Date date = sdf1.parse("2021-04-26T20:55:00.000Z");// You will get date object relative to server/client
															// timezone wherever it is parsed
//		 System.out.println(date.before(new Date()));
//		 SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy-MM-dd"); //If you need time just put specific format for time like 'HH:mm:ss'
//		 String dateStr = sdf2.format(date);
//		 System.out.println(dateStr);
//		Date date2 = new Date();
//		long time_difference = date2.getTime() - date.getTime();
//		// Calucalte time difference in days
//		long day3 = (time_difference / (1000 * 60 * 60 * 24)) % 365;
//		System.out.println(Math.abs(day3));
//		long day = (time_difference / (1000 * 60 * 60 * 24)) % 365;
//		System.out.println(Math.abs(day));

		Date date2 = new Date();

//		int lo = Period.between(date2, date).get;

		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSSXXX");
//		LocalDate l2 = LocalDate.
		LocalDate localDate1 = LocalDate.parse("2019-04-26T20:55:00.000Z");
		LocalDate localDate2 = LocalDate.parse("2020-01-08");

		// calculate difference
		long days = Period.between(localDate1, localDate2).getDays();
		System.out.println(days);

		Date date11 = new Date();
		  LocalDate localDate = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate()
	}
}
